AppDebug: true   # 设置程序所处的模式，debug=true 调试模式，日志优先显示在控制台， debug=false 非调试模式，将写入日志文件

# http服务相关配置
HttpServer:
  Api:
    Port: ":20191"                 #门户网站类端口,注意前面有冒号
  Web:
    Port: ":20201"                 #后端应用类端口,注意前面有冒号
  AllowCrossDomain: true     # #是否允许跨域，默认 允许，注意：本项目跨域和nginx跨域只能允许设置一个即可，如果同时设置跨域，反而会造成无法跨域

#日志相关配置
Logs:
  GinLogName: "/loggers/logs/gin.log"                  #设置 gin 框架的接口访问日志
  GoSkeletonLogName: "/loggers/logs/goskeleton.log"    #设置GoSkeleton项目骨架运行时日志文件名，注意该名称不要与上一条重复 ,避免和 gin 框架的日志掺杂一起，造成混乱。
  TextFormat: "json"                                #记录日志的格式，参数选项：console、json ， console 表示一般的文本格式
  TimePrecision: "millisecond"                         #记录日志时，相关的时间精度，该参数选项：second  、 millisecond ， 分别表示 秒 和 毫秒 ,默认为毫秒级别
  MaxSize: 10                                           #每个日志的最大尺寸(以MB为单位）， 超过该值，系统将会自动进行切割
  MaxBackups: 7                                        #保留旧日志最大个数
  MaxAge: 15                                           #保留旧日志最大天数
  Compress: false                                      #日志备份时，是否进行压缩

# 数据库相关配置（可以选择配置多个数据库）
Gormv2:
  UseDbType: "Mysql"  # 备选项 mysql 。根据需求后续添加其他数据库
  Mysql:
    IsInitGlobalGormMysql: 1    # 随项目启动为gorm db初始化一个全局 variable.GormDbMysql（完全等于*gorm.Db）,正确配置数据库，该值必须设置为: 1
    SlowThreshold: 30            # 慢 SQL 阈值(sql执行时间超过此时间单位（秒），就会触发系统日志记录)
    Write:  #原本这里打算设置读写分离，但是场景比较特定，需要的自己去改。如果把场景全部都概括了的话，那么这个就显得很臃肿。
      Host: "127.0.0.1"   #地址
      DataBase: "db_y_frame"  #数据库名称
      Port: 3306  #端口
      Prefix: "tb_"  #前缀
      User: "root"  #用户名称
      Pass: "123456" #用户密码
      Charset: "utf8" #编码格式
      SetMaxIdleConns: 10 #设置与数据库建立连接的最大数目。
      SetMaxOpenConns: 128 #设置连接池中的最大闲置连接数。
      SetConnMaxLifetime: 60    # 连接不活动时的最大生存时间(秒)
      #ReConnectInterval: 1    # 保留项,重连数据库间隔秒数
      #PingFailRetryTimes: 3   # 保留项,最大重连次数
    Log: #拦截gorm日志，重新gorm日志格式化
      IsOwnLogger: true #是否开启日志自定义
      infoStr:   "[info] %s\n"
      warnStr: "[warn] %s\n"
      errStr: "[error] %s\n"
      traceStr: "[traceStr] %s [%.3fms] [rows:%v] %s\n"
      traceWarnStr: "[traceWarn] %s %s [%.3fms] [rows:%v] %s\n"
      traceErrStr: "[traceErr] %s %s [%.3fms] [rows:%v] %s\n"

SnowFlake:
  SnowFlakeMachineId: 2               #如果本项目同时部署在多台机器，并且需要同时使用该算法，请为每一台机器设置不同的ID，区间范围: [0,1023]

#打包配置

#token字段
Token:
  JwtTokenSignKey:  "Y-frame"   #设置token生成时加密的签名
  JwtTokenOnlineUsers:  10         #一个账号密码允许最大获取几个有效的token，当超过这个值，第一次获取的token的账号、密码就会失效
  JwtTokenCreatedExpireAt: 28800   #创建时token默认有效秒数（token生成时间加上该时间秒数，算做有效期）,3600*8=28800 等于8小时
  JwtTokenRefreshAllowSec: 86400   #对于过期的token，允许在多少小时之内刷新，超过此时间则不允许刷新换取新token，86400=3600*24，即token过期24小时之内允许换新token
  JwtTokenRefreshExpireAt: 36000  #对于过期的token，支持从相关接口刷新获取新的token，它有效期为10个小时，3600*10=36000 等于10小时
  BindContextKeyName: "userToken"  #用户在 header 头部提交的token绑定到上下文时的键名，方便直接从上下文(gin.context)直接获取每个用户的id等信息

##validator 相关
#validator:
#  IsInit: 1 #是否开启 validator 错误翻译 1 代表开启 0 代表不开启
#  Language: "zh" #选择语言 可选择 zh 代表中文，en 代表英语 默认为英文

#验证码配置信息
Captcha:
  Length: 4 #验证码生成长度
  CollectNum: 10 #当过期时候，收集的数目
  Expiration: 60*60 #验证码生效时间
  StdWidth: 240 #验证码图像宽度
  StdHeight: 80 #验证码图像长度
  Lang: "zh" #语音验证码的语言 默认中文